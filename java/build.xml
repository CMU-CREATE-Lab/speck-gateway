<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="SpeckGateway" default="all">
   <dirname property="base.directory" file="${ant.file}"/>
   <property file="build.properties"/>

   <!-- Paths -->
   <path id="speck-core-classpath">
      <!-- third-party jars -->
      <pathelement path="${apache-derby1.jar}"/>
      <pathelement path="${apache-derby2.jar}"/>
      <pathelement path="${commons-io.jar}"/>
      <pathelement path="${commons-lang.jar}"/>
      <pathelement path="${create-lab-commons-device.jar}"/>
      <pathelement path="${create-lab-commons-usb-hid.jar}"/>
      <pathelement path="${create-lab-commons-user-interface.jar}"/>
      <pathelement path="${create-lab-commons-util.jar}"/>
      <pathelement path="${httpcomponents-client1.jar}"/>
      <pathelement path="${httpcomponents-client2.jar}"/>
      <pathelement path="${httpcomponents-client3.jar}"/>
      <pathelement path="${httpcomponents-client4.jar}"/>
      <pathelement path="${httpcomponents-client5.jar}"/>
      <pathelement path="${httpcomponents-client6.jar}"/>
      <pathelement path="${httpcomponents-client7.jar}"/>
      <pathelement path="${jackson1.jar}"/>
      <pathelement path="${jackson2.jar}"/>
      <pathelement path="${jackson3.jar}"/>
      <pathelement path="${jetbrains-annotations.jar}"/>
      <pathelement path="${jna.jar}"/>
      <pathelement path="${jnaerator.jar}"/>
      <pathelement path="${log4j.jar}"/>
      <pathelement path="${log4j-extras.jar}"/>
   </path>

   <path id="speck-applications-classpath">
      <!-- other classes within this project -->
      <pathelement path="${speck-core.build.dir}"/>

      <!-- third-party jars -->
      <pathelement path="${apache-derby1.jar}"/>
      <pathelement path="${apache-derby2.jar}"/>
      <pathelement path="${commons-io.jar}"/>
      <pathelement path="${commons-lang.jar}"/>
      <pathelement path="${create-lab-commons-device.jar}"/>
      <pathelement path="${create-lab-commons-usb-hid.jar}"/>
      <pathelement path="${create-lab-commons-user-interface.jar}"/>
      <pathelement path="${create-lab-commons-util.jar}"/>
      <pathelement path="${httpcomponents-client1.jar}"/>
      <pathelement path="${httpcomponents-client2.jar}"/>
      <pathelement path="${httpcomponents-client3.jar}"/>
      <pathelement path="${httpcomponents-client4.jar}"/>
      <pathelement path="${httpcomponents-client5.jar}"/>
      <pathelement path="${httpcomponents-client6.jar}"/>
      <pathelement path="${httpcomponents-client7.jar}"/>
      <pathelement path="${jackson1.jar}"/>
      <pathelement path="${jackson2.jar}"/>
      <pathelement path="${jackson3.jar}"/>
      <pathelement path="${jetbrains-annotations.jar}"/>
      <pathelement path="${jna.jar}"/>
      <pathelement path="${jnaerator.jar}"/>
      <pathelement path="${log4j.jar}"/>
      <pathelement path="${log4j-extras.jar}"/>
   </path>

   <!-- Compiler resources -->
   <patternset id="compiler.resources.nonfilterable">
      <!-- excluded files -->
      <exclude name="**/CVS/**"/>
      <exclude name="**/SCCS/**"/>
      <exclude name="**/RCS/**"/>
      <exclude name="**/rcs/**"/>
      <exclude name="**/.DS_Store/**"/>
      <exclude name="**/.svn/**"/>
      <!-- included files -->
      <include name="**/?*.gif"/>
      <include name="**/?*.png"/>
      <include name="**/?*.jpeg"/>
      <include name="**/?*.jpg"/>
      <include name="**/?*.dll"/>
      <include name="**/?*.jnilib"/>
      <include name="**/?*.so"/>
      <include name="**/?*.lib"/>
      <include name="**/?*.wav"/>
   </patternset>
   <patternset id="compiler.resources.filterable">
      <!-- excluded files -->
      <exclude name="**/CVS/**"/>
      <exclude name="**/SCCS/**"/>
      <exclude name="**/RCS/**"/>
      <exclude name="**/rcs/**"/>
      <exclude name="**/.DS_Store/**"/>
      <exclude name="**/.svn/**"/>
      <!-- included files -->
      <include name="**/?*.properties"/>
      <include name="**/?*.xml"/>
      <include name="**/?*.htm"/>
      <include name="**/?*.html"/>
      <include name="**/?*.dtd"/>
      <include name="**/?*.tld"/>
      <include name="**/?*.xsd"/>
      <include name="**/?*.xsl"/>
      <include name="**/?*.ice"/>
      <include name="**/?*.pem"/>
   </patternset>

   <tstamp>
      <format property="build.timestamp" pattern="yyyy-MM-dd hh:mm:ss a z"/>
   </tstamp>

   <!-- get the svn repository url and revision -->
   <property name="speck-gateway.version-number" value="${speck-gateway.version-number.major}.${speck-gateway.version-number.minor}.${speck-gateway.version-number.revision}"/>
   <echo level="info">Speck Gatway Version Number: ${speck-gateway.version-number}</echo>

   <target name="all" depends="clean, dist" description="clean, then build everything"/>

   <target name="clean" depends="clean-speck-core,
                                 clean-speck-applications,
                                 clean-speck-gateway-webstart" description="clean up everything"/>

   <target name="clean-speck-core" description="clean up speck-core">
      <delete dir="${speck-core.build.dir}"/>
      <delete dir="${speck-core.dist.dir}"/>
   </target>

   <target name="clean-speck-applications" description="clean up speck-applications">
      <delete dir="${speck-applications.build.dir}"/>
      <delete dir="${speck-applications.dist.dir}"/>
   </target>

   <target name="clean-speck-gateway-webstart" description="clean up speck-gateway-webstart">
      <delete dir="${speck-gateway-webstart.dist.dir}"/>
   </target>
   
   <target name="build" depends="build-speck-core, build-speck-applications" description="builds the source code" unless="build-is-complete">
      <property name="build-is-complete" value="true"/>
   </target>

   <target name="build-speck-core" description="builds the speck-core source code" unless="build-speck-core-is-complete">
      <compile-code-and-copy-resources src.dir="${speck-core.src.dir}"
                                       build.dir="${speck-core.build.dir}"
                                       classpath-ref="speck-core-classpath"/>

      <property name="build-speck-core-is-complete" value="true"/>
   </target>

   <target name="build-speck-applications" depends="build-speck-core" description="builds the speck-applications source code" unless="build-speck-applications-is-complete">
      <compile-code-and-copy-resources src.dir="${speck-applications.src.dir}"
                                       build.dir="${speck-applications.build.dir}"
                                       classpath-ref="speck-applications-classpath">
         <resources-filterset>
            <filterset>
               <filter token="version.number" value="${speck-gateway.version-number}"/>
            </filterset>
         </resources-filterset>
      </compile-code-and-copy-resources>

      <property name="build-speck-applications-is-complete" value="true"/>
   </target>

   <target name="dist" depends="dist-speck-core, dist-speck-applications" description="builds the project" unless="dist-is-complete">
      <property name="dist-is-complete" value="true"/>
   </target>

   <target name="dist-speck-core" depends="build-speck-core" description="builds speck-core" unless="dist-speck-core-is-complete">
      <create-dist component.name="speck-core">
         <additional-files-to-copy>
            <fileset file="${apache-derby1.jar}"/>
            <fileset file="${apache-derby2.jar}"/>
            <fileset file="${commons-io.jar}"/>
            <fileset file="${commons-lang.jar}"/>
            <fileset file="${create-lab-commons-device.jar}"/>
            <fileset file="${create-lab-commons-usb-hid.jar}"/>
            <fileset file="${create-lab-commons-user-interface.jar}"/>
            <fileset file="${create-lab-commons-util.jar}"/>
            <fileset file="${hidapi1.native}"/>
            <fileset file="${hidapi2.native}"/>
            <fileset file="${hidapi3.native}"/>
            <fileset file="${hidapi4.native}"/>
            <fileset file="${httpcomponents-client1.jar}"/>
            <fileset file="${httpcomponents-client2.jar}"/>
            <fileset file="${httpcomponents-client3.jar}"/>
            <fileset file="${httpcomponents-client4.jar}"/>
            <fileset file="${httpcomponents-client5.jar}"/>
            <fileset file="${httpcomponents-client6.jar}"/>
            <fileset file="${httpcomponents-client7.jar}"/>
            <fileset file="${jackson1.jar}"/>
            <fileset file="${jackson2.jar}"/>
            <fileset file="${jackson3.jar}"/>
            <fileset file="${jna.jar}"/>
            <fileset file="${jnaerator.jar}"/>
         </additional-files-to-copy>
      </create-dist>

      <property name="dist-speck-core-is-complete" value="true"/>
   </target>

   <target name="dist-speck-applications" depends="dist-speck-core, build-speck-applications" description="builds speck-applications" unless="dist-speck-applications-is-complete">
      <create-dist component.name="speck-applications">
         <jar-manifest-attributes>
            <attribute name="Main-Class" value="org.specksensor.applications.SpeckGateway"/>
         </jar-manifest-attributes>
         <additional-files-to-copy>
            <fileset file="${speck-core.dist.dir}/${speck-core.jar.filename}"/>
            <fileset file="${apache-derby1.jar}"/>
            <fileset file="${apache-derby2.jar}"/>
            <fileset file="${commons-io.jar}"/>
            <fileset file="${commons-lang.jar}"/>
            <fileset file="${create-lab-commons-device.jar}"/>
            <fileset file="${create-lab-commons-usb-hid.jar}"/>
            <fileset file="${create-lab-commons-user-interface.jar}"/>
            <fileset file="${create-lab-commons-util.jar}"/>
            <fileset file="${hidapi1.native}"/>
            <fileset file="${hidapi2.native}"/>
            <fileset file="${hidapi3.native}"/>
            <fileset file="${hidapi4.native}"/>
            <fileset file="${httpcomponents-client1.jar}"/>
            <fileset file="${httpcomponents-client2.jar}"/>
            <fileset file="${httpcomponents-client3.jar}"/>
            <fileset file="${httpcomponents-client4.jar}"/>
            <fileset file="${httpcomponents-client5.jar}"/>
            <fileset file="${httpcomponents-client6.jar}"/>
            <fileset file="${httpcomponents-client7.jar}"/>
            <fileset file="${jackson1.jar}"/>
            <fileset file="${jackson2.jar}"/>
            <fileset file="${jackson3.jar}"/>
            <fileset file="${jna.jar}"/>
            <fileset file="${jnaerator.jar}"/>
         </additional-files-to-copy>
      </create-dist>

      <property name="dist-speck-applications-is-complete" value="true"/>
   </target>

   <target name="dist-webstart" depends="dist" description="Creates the Java Web Start application" unless="dist-webstart-is-complete">

      <mkdir dir="${speck-gateway-webstart.dist.dir}"/>

      <!-- copy all the web content and jars we need -->
      <copy todir="${speck-gateway-webstart.dist.dir}" flatten="false">
         <fileset dir="${speck-gateway-webstart.src.dir}">
            <exclude name="index.html"/>
            <exclude name="**/docs/zip/**"/>
            <include name="**/*"/>
         </fileset>
      </copy>
      <copy todir="${speck-gateway-webstart.dist.dir}" flatten="false">
         <fileset dir="${speck-gateway-webstart.src.dir}">
            <include name="index.html"/>
         </fileset>
         <filterset>
            <filter token="version.number" value="${speck-gateway.version-number}"/>
         </filterset>
      </copy>
      <copy todir="${speck-gateway-webstart.dist.dir}/jar" flatten="true">
         <fileset dir="${speck-applications.dist.dir}">
            <include name="**/*.jar"/>
         </fileset>
         <fileset file="${hidapi-webstart.native1}"/>
         <fileset file="${hidapi-webstart.native2}"/>
      </copy>

      <!-- Sign all the jars -->
      <signjar
            alias="${keystore.alias}"
            keystore="${keystore.location}"
            storepass="${keystore.password}"
            keypass="${keystore.private-key.password}"
            lazy="false">
         <fileset dir="${speck-gateway-webstart.dist.dir}">
            <include name="**/*.jar"/>
         </fileset>
      </signjar>

      <!-- delete existing zip, if any -->
      <delete file="${speck-gateway-webstart.dist.dir}/${speck-gateway.zip.filename}"/>

      <!-- Copy the README, using a filter to insert the version number -->
      <copy todir="${speck-applications.dist.dir}" flatten="false">
         <fileset dir="${speck-gateway-webstart.src.dir}/docs/zip">
            <include name="README1.txt"/>
         </fileset>
         <filterset>
            <filter token="version.number" value="${speck-gateway.version-number}"/>
         </filterset>
      </copy>

      <!-- create the zip -->
      <zip destfile="${speck-gateway-webstart.dist.dir}/${speck-gateway.zip.filename}" update="yes" compress="true">
         <zipfileset dir="${speck-applications.dist.dir}" includes="**/*" prefix="${speck-gateway.zip.directory_name}"/>
         <zipfileset dir="${base.directory}/.." includes="README.txt" fullpath="${speck-gateway.zip.directory_name}/README2.txt"/>
         <zipfileset dir="${base.directory}" includes="LICENSE.txt" prefix="${speck-gateway.zip.directory_name}"/>
         <zipfileset dir="${base.directory}" includes="NOTICE.txt" prefix="${speck-gateway.zip.directory_name}"/>
         <zipfileset dir="${lib.dir}/apache-derby/" includes="LICENSE" fullpath="${speck-gateway.zip.directory_name}/licenses/APACHE_DERBY_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/commons-io/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/COMMONS_IO_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/commons-lang/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/COMMONS_LANG_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/HIDAPI/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/HIDAPI_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/httpcomponents-client/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/HTTP_COMPONENTS_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/jackson/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/JACKSON_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/JNA/" includes="license.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/JNA_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/JNAerator/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/JNAERATOR_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/log4j/" includes="LICENSE" fullpath="${speck-gateway.zip.directory_name}/licenses/LOG4J_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/log4j-extras/" includes="LICENSE" fullpath="${speck-gateway.zip.directory_name}/licenses/LOG4J_EXTRAS_LICENSE.txt"/>
      </zip>

      <property name="dist-webstart-is-complete" value="true"/>
   </target>

   <!-- ============================================================================================================ -->
   <!-- Macro definitions -->
   <!-- ============================================================================================================ -->

   <macrodef name="compile-code-and-copy-resources">
      <attribute name="classpath-ref"/>
      <attribute name="build.dir"/>
      <attribute name="src.dir"/>
      <element name="resources-filterset" optional="true"/>
      <sequential>
         <!-- create the build directory -->
         <mkdir dir="@{build.dir}"/>

         <!-- compile code -->
         <javac srcdir="@{src.dir}"
                destdir="@{build.dir}"
                classpathref="@{classpath-ref}"
                debug="${java.compiler.debug}"
                nowarn="${java.compiler.generate.no.warnings}"
                memorymaximumsize="${java.compiler.max.memory}"
                source="${java.compiler.source.level}"
                target="${java.compiler.target.level}"
                fork="true"
                includeAntRuntime="false">
            <compilerarg line="${java.compiler.args}"/>
         </javac>

         <!-- copy resources -->
         <copy todir="@{build.dir}">
            <fileset dir="@{src.dir}">
               <patternset refid="compiler.resources.filterable"/>
            </fileset>
            <resources-filterset/>
         </copy>
         <copy todir="@{build.dir}">
            <fileset dir="@{src.dir}">
               <patternset refid="compiler.resources.nonfilterable"/>
            </fileset>
         </copy>

      </sequential>
   </macrodef>

   <macrodef name="create-dist">
      <attribute name="component.name"/>
      <element name="jar-manifest-attributes" optional="true"/>
      <element name="additional-files-to-copy" optional="true"/>
      <sequential>
         <!-- create the dist directory -->
         <mkdir dir="${@{component.name}.dist.dir}"/>

         <!-- copy required jar files and native lib -->
         <copy todir="${@{component.name}.dist.dir}" flatten="true">
            <fileset file="${log4j.jar}"/>
            <fileset file="${log4j-extras.jar}"/>
            <additional-files-to-copy/>
         </copy>

         <!-- define the execution classpath for use in the scripts -->
         <path id="@{component.name}.execution.classpath.elements">
            <pathelement location="${@{component.name}.dist.dir}"/>
            <fileset dir="${@{component.name}.dist.dir}">
               <include name="**/*.jar"/>
               <include name="**/*.dll"/>
               <include name="**/*.so"/>
            </fileset>
         </path>

         <!-- Set up a path id for the dist directory so it contains the correct kind of slashes when we do the pathconvert mapping -->
         <path id="dist-@{component.name}.dir.before-conversion" path="${@{component.name}.dist.dir}"/>

         <!-- Convert the dist directory path for the target platform to ensure that all the slashes are in the right direction -->
         <pathconvert property="dist-@{component.name}.dir.after-conversion" dirsep="/" pathsep=":" refid="dist-@{component.name}.dir.before-conversion"/>

         <!-- Create the classpath -->
         <pathconvert property="@{component.name}.execution.classpath" dirsep="/" pathsep=" " refid="@{component.name}.execution.classpath.elements">
            <map from="${dist-@{component.name}.dir.after-conversion}" to="."/>
         </pathconvert>

         <!-- create jar of Java classes -->
         <jar destfile="${@{component.name}.dist.dir}/${@{component.name}.jar.filename}"
              basedir="${@{component.name}.build.dir}"
              update="no"
              compress="true">
            <manifest>
               <attribute name="Built-By" value="${jar.built-by}"/>
               <attribute name="Build-Timestamp" value="${build.timestamp}"/>
               <attribute name="Class-Path" value="${@{component.name}.execution.classpath}"/>
               <jar-manifest-attributes/>
            </manifest>
         </jar>

      </sequential>
   </macrodef>

</project>