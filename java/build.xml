<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="SpeckGateway" default="all">
   <dirname property="base.directory" file="${ant.file}"/>
   <property file="build.properties"/>

   <!-- Paths -->
   <path id="speck-core-classpath">
      <!-- third-party jars -->
      <pathelement path="${apache-derby1.jar}"/>
      <pathelement path="${apache-derby2.jar}"/>
      <pathelement path="${commons-io.jar}"/>
      <pathelement path="${commons-lang.jar}"/>
      <pathelement path="${create-lab-commons-device.jar}"/>
      <pathelement path="${create-lab-commons-usb-hid.jar}"/>
      <pathelement path="${create-lab-commons-user-interface.jar}"/>
      <pathelement path="${create-lab-commons-util.jar}"/>
      <pathelement path="${httpcomponents-client1.jar}"/>
      <pathelement path="${httpcomponents-client2.jar}"/>
      <pathelement path="${httpcomponents-client3.jar}"/>
      <pathelement path="${httpcomponents-client4.jar}"/>
      <pathelement path="${httpcomponents-client5.jar}"/>
      <pathelement path="${httpcomponents-client6.jar}"/>
      <pathelement path="${httpcomponents-client7.jar}"/>
      <pathelement path="${jackson1.jar}"/>
      <pathelement path="${jackson2.jar}"/>
      <pathelement path="${jackson3.jar}"/>
      <pathelement path="${jetbrains-annotations.jar}"/>
      <pathelement path="${jna.jar}"/>
      <pathelement path="${jnaerator.jar}"/>
      <pathelement path="${log4j.jar}"/>
      <pathelement path="${log4j-extras.jar}"/>
   </path>

   <path id="speck-applications-classpath">
      <!-- other classes within this project -->
      <pathelement path="${speck-core.build.dir}"/>

      <!-- third-party jars -->
      <pathelement path="${apache-derby1.jar}"/>
      <pathelement path="${apache-derby2.jar}"/>
      <pathelement path="${commons-io.jar}"/>
      <pathelement path="${commons-lang.jar}"/>
      <pathelement path="${create-lab-commons-device.jar}"/>
      <pathelement path="${create-lab-commons-usb-hid.jar}"/>
      <pathelement path="${create-lab-commons-user-interface.jar}"/>
      <pathelement path="${create-lab-commons-util.jar}"/>
      <pathelement path="${httpcomponents-client1.jar}"/>
      <pathelement path="${httpcomponents-client2.jar}"/>
      <pathelement path="${httpcomponents-client3.jar}"/>
      <pathelement path="${httpcomponents-client4.jar}"/>
      <pathelement path="${httpcomponents-client5.jar}"/>
      <pathelement path="${httpcomponents-client6.jar}"/>
      <pathelement path="${httpcomponents-client7.jar}"/>
      <pathelement path="${jackson1.jar}"/>
      <pathelement path="${jackson2.jar}"/>
      <pathelement path="${jackson3.jar}"/>
      <pathelement path="${jetbrains-annotations.jar}"/>
      <pathelement path="${jna.jar}"/>
      <pathelement path="${jnaerator.jar}"/>
      <pathelement path="${log4j.jar}"/>
      <pathelement path="${log4j-extras.jar}"/>
   </path>

   <!-- Compiler resources -->
   <patternset id="compiler.resources.nonfilterable">
      <!-- excluded files -->
      <exclude name="**/CVS/**"/>
      <exclude name="**/SCCS/**"/>
      <exclude name="**/RCS/**"/>
      <exclude name="**/rcs/**"/>
      <exclude name="**/.DS_Store/**"/>
      <exclude name="**/.svn/**"/>
      <!-- included files -->
      <include name="**/?*.gif"/>
      <include name="**/?*.png"/>
      <include name="**/?*.jpeg"/>
      <include name="**/?*.jpg"/>
      <include name="**/?*.dll"/>
      <include name="**/?*.jnilib"/>
      <include name="**/?*.so"/>
      <include name="**/?*.lib"/>
      <include name="**/?*.wav"/>
   </patternset>
   <patternset id="compiler.resources.filterable">
      <!-- excluded files -->
      <exclude name="**/CVS/**"/>
      <exclude name="**/SCCS/**"/>
      <exclude name="**/RCS/**"/>
      <exclude name="**/rcs/**"/>
      <exclude name="**/.DS_Store/**"/>
      <exclude name="**/.svn/**"/>
      <!-- included files -->
      <include name="**/?*.properties"/>
      <include name="**/?*.xml"/>
      <include name="**/?*.htm"/>
      <include name="**/?*.html"/>
      <include name="**/?*.dtd"/>
      <include name="**/?*.tld"/>
      <include name="**/?*.xsd"/>
      <include name="**/?*.xsl"/>
      <include name="**/?*.ice"/>
      <include name="**/?*.pem"/>
   </patternset>

   <tstamp>
      <format property="build.timestamp" pattern="yyyy-MM-dd hh:mm:ss a z"/>
   </tstamp>

   <property environment="env"/>

   <!-- get the svn repository url and revision -->
   <property name="speck-gateway.version-number" value="${speck-gateway.version-number.major}.${speck-gateway.version-number.minor}.${speck-gateway.version-number.revision}"/>
   <echo level="info">Speck Gateway Version Number: ${speck-gateway.version-number}</echo>

   <target name="all" depends="clean, dist" description="clean, then build everything"/>

   <target name="clean" depends="clean-speck-core,
                                 clean-speck-applications,
                                 clean-speck-gateway-web-distro" description="clean up everything"/>

   <target name="clean-speck-core" description="clean up speck-core">
      <delete dir="${speck-core.build.dir}"/>
      <delete dir="${speck-core.dist.dir}"/>
   </target>

   <target name="clean-speck-applications" description="clean up speck-applications">
      <delete dir="${speck-applications.build.dir}"/>
      <delete dir="${speck-applications.dist.dir}"/>
   </target>

   <target name="clean-speck-gateway-web-distro" description="clean up speck-gateway-web-distro">
      <delete dir="${speck-gateway-web-distro.dist.dir}"/>
   </target>

   <target name="build" depends="build-speck-core, build-speck-applications" description="builds the source code" unless="build-is-complete">
      <property name="build-is-complete" value="true"/>
   </target>

   <target name="build-speck-core" description="builds the speck-core source code" unless="build-speck-core-is-complete">
      <compile-code-and-copy-resources src.dir="${speck-core.src.dir}"
                                       build.dir="${speck-core.build.dir}"
                                       classpath-ref="speck-core-classpath"/>

      <property name="build-speck-core-is-complete" value="true"/>
   </target>

   <target name="build-speck-applications" depends="build-speck-core" description="builds the speck-applications source code" unless="build-speck-applications-is-complete">
      <compile-code-and-copy-resources src.dir="${speck-applications.src.dir}"
                                       build.dir="${speck-applications.build.dir}"
                                       classpath-ref="speck-applications-classpath">
         <resources-filterset>
            <filterset>
               <filter token="version.number" value="${speck-gateway.version-number}"/>
            </filterset>
         </resources-filterset>
      </compile-code-and-copy-resources>

      <property name="build-speck-applications-is-complete" value="true"/>
   </target>

   <target name="dist" depends="dist-speck-core, dist-speck-applications" description="builds the project" unless="dist-is-complete">
      <property name="dist-is-complete" value="true"/>
   </target>

   <target name="dist-speck-core" depends="build-speck-core" description="builds speck-core" unless="dist-speck-core-is-complete">
      <create-dist component.name="speck-core">
         <additional-files-to-copy>
            <fileset file="${apache-derby1.jar}"/>
            <fileset file="${apache-derby2.jar}"/>
            <fileset file="${commons-io.jar}"/>
            <fileset file="${commons-lang.jar}"/>
            <fileset file="${create-lab-commons-device.jar}"/>
            <fileset file="${create-lab-commons-usb-hid.jar}"/>
            <fileset file="${create-lab-commons-user-interface.jar}"/>
            <fileset file="${create-lab-commons-util.jar}"/>
            <fileset file="${hidapi1.native}"/>
            <fileset file="${hidapi2.native}"/>
            <fileset file="${hidapi3.native}"/>
            <fileset file="${hidapi4.native}"/>
            <fileset file="${httpcomponents-client1.jar}"/>
            <fileset file="${httpcomponents-client2.jar}"/>
            <fileset file="${httpcomponents-client3.jar}"/>
            <fileset file="${httpcomponents-client4.jar}"/>
            <fileset file="${httpcomponents-client5.jar}"/>
            <fileset file="${httpcomponents-client6.jar}"/>
            <fileset file="${httpcomponents-client7.jar}"/>
            <fileset file="${jackson1.jar}"/>
            <fileset file="${jackson2.jar}"/>
            <fileset file="${jackson3.jar}"/>
            <fileset file="${jna.jar}"/>
            <fileset file="${jnaerator.jar}"/>
         </additional-files-to-copy>
      </create-dist>

      <property name="dist-speck-core-is-complete" value="true"/>
   </target>

   <target name="dist-speck-applications" depends="dist-speck-core, build-speck-applications" description="builds speck-applications" unless="dist-speck-applications-is-complete">
      <create-dist component.name="speck-applications">
         <jar-manifest-attributes>
            <attribute name="Main-Class" value="org.specksensor.applications.SpeckGateway"/>
         </jar-manifest-attributes>
         <additional-files-to-copy>
            <fileset file="${speck-core.dist.dir}/${speck-core.jar.filename}"/>
            <fileset file="${apache-derby1.jar}"/>
            <fileset file="${apache-derby2.jar}"/>
            <fileset file="${commons-io.jar}"/>
            <fileset file="${commons-lang.jar}"/>
            <fileset file="${create-lab-commons-device.jar}"/>
            <fileset file="${create-lab-commons-usb-hid.jar}"/>
            <fileset file="${create-lab-commons-user-interface.jar}"/>
            <fileset file="${create-lab-commons-util.jar}"/>
            <fileset file="${hidapi1.native}"/>
            <fileset file="${hidapi2.native}"/>
            <fileset file="${hidapi3.native}"/>
            <fileset file="${hidapi4.native}"/>
            <fileset file="${httpcomponents-client1.jar}"/>
            <fileset file="${httpcomponents-client2.jar}"/>
            <fileset file="${httpcomponents-client3.jar}"/>
            <fileset file="${httpcomponents-client4.jar}"/>
            <fileset file="${httpcomponents-client5.jar}"/>
            <fileset file="${httpcomponents-client6.jar}"/>
            <fileset file="${httpcomponents-client7.jar}"/>
            <fileset file="${jackson1.jar}"/>
            <fileset file="${jackson2.jar}"/>
            <fileset file="${jackson3.jar}"/>
            <fileset file="${jna.jar}"/>
            <fileset file="${jnaerator.jar}"/>
         </additional-files-to-copy>
      </create-dist>

      <property name="dist-speck-applications-is-complete" value="true"/>
   </target>

   <target name="dist-web-distro" depends="clean, dist" description="Creates the web distribution" unless="dist-web-distro-is-complete">
      <!-- Make sure LAUNCH4J_HOME is defined, then load the taskdef -->
      <fail unless="env.LAUNCH4J_HOME" message="The 'dist-web-distro' task requires the LAUNCH4J_HOME environment variable to be defined! Aborting."/>
      <echo level="info">Launch4J Home: ${env.LAUNCH4J_HOME}</echo>
      <taskdef name="launch4j"
               classname="net.sf.launch4j.ant.Launch4jTask"
               classpath="${env.LAUNCH4J_HOME}/launch4j.jar:${env.LAUNCH4J_HOME}/lib/xstream.jar"/>

      <mkdir dir="${speck-gateway-web-distro.dist.dir}"/>
      <mkdir dir="${speck-gateway-web-distro.dist.dir}/software"/>
      <mkdir dir="${speck-gateway-web-distro.dist.dir}/software/mac"/>
      <mkdir dir="${speck-gateway-web-distro.dist.dir}/software/windows"/>

      <!-- copy all the web content we need (excluding stuff that needs special token filtering) -->
      <copy todir="${speck-gateway-web-distro.dist.dir}" flatten="false">
         <fileset dir="${speck-gateway-web-distro.src.dir}">
            <exclude name="index.html"/>
            <exclude name="**/software/**"/>
            <include name="**/*"/>
         </fileset>
      </copy>
      <copy file="${base.directory}/../README.pdf"
            tofile="${speck-gateway-web-distro.dist.dir}/software/docs/speck_gateway.pdf"
            flatten="false"/>

      <!-- copy the items that need token filtering -->
      <copy todir="${speck-gateway-web-distro.dist.dir}" flatten="false">
         <fileset dir="${speck-gateway-web-distro.src.dir}">
            <include name="index.html"/>
            <include name="software/index.html"/>
         </fileset>
         <filterset>
            <filter token="version.number" value="${speck-gateway.version-number}"/>
         </filterset>
      </copy>
      <copy file="${speck-gateway-web-distro.src.dir}/software/version-number.txt"
            tofile="${speck-gateway-web-distro.dist.dir}/software/speck-version-number.txt" flatten="false">
         <filterset>
            <filter token="version.number" value="${speck-gateway.version-number}"/>
         </filterset>
      </copy>
      <copy tofile="${speck-gateway-web-distro.dist.dir}/software/windows/SpeckGateway-launch4j-config.xml" flatten="false">
         <fileset dir="${speck-gateway-web-distro.src.dir}/software/windows">
            <include name="SpeckGateway-launch4j-config.xml"/>
         </fileset>
         <filterset>
            <filter token="version.number" value="${speck-gateway.version-number}"/>
            <filter token="version.number.four-digit" value="${speck-gateway.version-number}.0"/>
            <filter token="icon.path" value="${speck-gateway-web-distro.src.dir}/software/windows/speck_icon_256.ico"/>
            <filter token="speck-applications.jar" value="${speck-gateway-web-distro.dist.dir}/software/windows/speck-applications.jar"/>
            <filter token="speck-gateway.exe" value="${speck-gateway-web-distro.dist.dir}/software/windows/SpeckGateway.exe"/>
            <filter token="app.pretty-name" value="Speck Gateway"/>
            <filter token="app.exe-name" value="SpeckGateway.exe"/>
            <filter token="jre.options" value=""/>
         </filterset>
      </copy>
      <copy todir="${speck-gateway-web-distro.dist.dir}/software/windows" flatten="false">
         <fileset dir="${speck-gateway-web-distro.src.dir}/software/windows">
            <include name="SpeckGateway.aip"/>
         </fileset>
         <filterset>
            <filter token="version.number" value="${speck-gateway.version-number}"/>
            <filter token="app.pretty-name" value="Speck Gateway"/>
            <filter token="app.exe-name" value="SpeckGateway.exe"/>
            <filter token="icon.filename" value="speck_icon_256.ico"/>
         </filterset>
      </copy>

      <!-- ZIP FILE BEGIN ========================================================================================== -->

      <!-- delete existing zip, if any -->
      <delete file="${speck-gateway-web-distro.dist.dir}/software/${speck-gateway.zip.filename}"/>

      <!-- create the zip -->
      <zip destfile="${speck-gateway-web-distro.dist.dir}/software/${speck-gateway.zip.filename}" update="yes" compress="true">
         <zipfileset dir="${speck-applications.dist.dir}" includes="**/*" prefix="${speck-gateway.zip.directory_name}"/>
         <zipfileset dir="${base.directory}/.." includes="README.pdf" fullpath="${speck-gateway.zip.directory_name}/README.pdf"/>
         <zipfileset dir="${base.directory}" includes="LICENSE.txt" prefix="${speck-gateway.zip.directory_name}"/>
         <zipfileset dir="${base.directory}" includes="NOTICE.txt" prefix="${speck-gateway.zip.directory_name}"/>
         <zipfileset dir="${lib.dir}/apache-derby/" includes="LICENSE" fullpath="${speck-gateway.zip.directory_name}/licenses/APACHE_DERBY_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/commons-io/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/COMMONS_IO_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/commons-lang/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/COMMONS_LANG_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/HIDAPI/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/HIDAPI_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/httpcomponents-client/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/HTTP_COMPONENTS_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/jackson/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/JACKSON_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/JNA/" includes="license.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/JNA_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/JNAerator/" includes="LICENSE.txt" fullpath="${speck-gateway.zip.directory_name}/licenses/JNAERATOR_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/log4j/" includes="LICENSE" fullpath="${speck-gateway.zip.directory_name}/licenses/LOG4J_LICENSE.txt"/>
         <zipfileset dir="${lib.dir}/log4j-extras/" includes="LICENSE" fullpath="${speck-gateway.zip.directory_name}/licenses/LOG4J_EXTRAS_LICENSE.txt"/>
      </zip>

      <!-- ZIP FILE END ============================================================================================ -->

      <!-- WINDOWS EXE BEGIN ======================================================================================= -->

      <!-- copy in all the jars and such, but exclude the Mac and Linux native libs and the README which we don't need for the .exe -->
      <copy todir="${speck-gateway-web-distro.dist.dir}/software/windows" flatten="true">
         <fileset dir="${speck-applications.dist.dir}">
            <exclude name="**/*.dylib"/>
            <exclude name="**/*.jnilib"/>
            <exclude name="**/*.so"/>
            <exclude name="**/README*"/>
            <include name="**/*"/>
         </fileset>
         <fileset dir="${base.directory}">
            <include name="LICENSE.txt"/>
            <include name="NOTICE.txt"/>
         </fileset>
         <fileset dir="${base.directory}/..">
            <include name="README.pdf"/>
         </fileset>
      </copy>

      <!-- Copy third-party licenses -->
      <mkdir dir="${speck-gateway-web-distro.dist.dir}/software/windows/licenses"/>
      <copy file="${lib.dir}/apache-derby/LICENSE" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/APACHE_DERBY_LICENSE.txt"/>
      <copy file="${lib.dir}/commons-io/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/COMMONS_IO_LICENSE.txt"/>
      <copy file="${lib.dir}/commons-lang/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/COMMONS_LANG_LICENSE.txt"/>
      <copy file="${lib.dir}/HIDAPI/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/HIDAPI_LICENSE.txt"/>
      <copy file="${lib.dir}/httpcomponents-client/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/HTTP_COMPONENTS_LICENSE.txt"/>
      <copy file="${lib.dir}/jackson/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/JACKSON_LICENSE.txt"/>
      <copy file="${lib.dir}/JNA/license.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/JNA_LICENSE.txt"/>
      <copy file="${lib.dir}/JNAerator/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/JNAERATOR_LICENSE.txt"/>
      <copy file="${lib.dir}/log4j/LICENSE" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/LOG4J_LICENSE.txt"/>
      <copy file="${lib.dir}/log4j-extras/LICENSE" tofile="${speck-gateway-web-distro.dist.dir}/software/windows/licenses/LOG4J_EXTRAS_LICENSE.txt"/>

      <!-- copy the icon files -->
      <copy file="${speck-gateway-web-distro.src.dir}/software/windows/speck_icon_256.ico" todir="${speck-gateway-web-distro.dist.dir}/software/windows/"/>

      <!-- create the .exe -->
      <launch4j configFile="${speck-gateway-web-distro.dist.dir}/software/windows/SpeckGateway-launch4j-config.xml"/>

      <!-- WINDOWS EXE END ========================================================================================= -->

      <!-- MAC APP BEGIN =========================================================================================== -->

      <create-mac-application creator.code="Spck"
                              app.pretty-name="Speck Gateway"
                              app.pretty-name-no-spaces="SpeckGateway"
                              version.number="${speck-gateway.version-number}"
                              main.class="org.specksensor.applications.SpeckGateway"
                              bundle.identifier="org.specksensor.applications.gateway.speck"
                              signing.identity="${macos.signing.identity}"
                              iconset.file="speck.iconset"
                              icns.file="speck.icns"
                              jre.options=""/>

      <!-- MAC APP END ============================================================================================= -->

      <property name="dist-web-distro-is-complete" value="true"/>
   </target>

   <target name="create-windows-msi" description="Creates the .msi installer for Windows" unless="create-windows-msi-is-complete">
      <condition property="isWindows">
         <os family="windows"/>
      </condition>

      <fail unless="isWindows" message="The 'create-windows-msi' task can only be executed on Windows. Aborting."/>
      <fail unless="env.ADVANCED_INSTALLER_HOME" message="The 'create-windows-msi' task requires the ADVANCED_INSTALLER_HOME environment variable to be defined! Aborting."/>
      <echo level="info">Now executing 'create-windows-msi': [${env.ADVANCED_INSTALLER_HOME}]</echo>

      <exec executable="${env.ADVANCED_INSTALLER_HOME}/bin/x86/AdvancedInstaller.com"
            dir="${speck-gateway-web-distro.dist.dir}/software/windows/">
         <arg line="/build"/>
         <!-- MUST use backslashes here! -->
         <arg line="${speck-gateway-web-distro.dist.dir}\software\windows\SpeckGateway.aip"/>
      </exec>

      <copy file="${speck-gateway-web-distro.dist.dir}/software/windows/SpeckGateway-SetupFiles/SpeckGateway.msi"
            todir="${speck-gateway-web-distro.dist.dir}/software/windows"/>

      <delete includeemptydirs="true">
         <fileset dir="${speck-gateway-web-distro.dist.dir}/software/windows/">
            <exclude name="SpeckGateway.msi"/>
            <include name="**/*"/>
         </fileset>
      </delete>

      <!-- zip up the .msi -->
      <zip destfile="${speck-gateway-web-distro.dist.dir}/software/windows/SpeckGateway.zip" update="no" compress="true">
         <zipfileset dir="${speck-gateway-web-distro.dist.dir}/software/windows" includes="SpeckGateway.msi" prefix="${speck-gateway.zip.directory_name}"/>
      </zip>

      <!-- delete the .msi -->
      <delete file="${speck-gateway-web-distro.dist.dir}/software/windows/SpeckGateway.msi"/>

      <property name="create-windows-msi-is-complete" value="true"/>
   </target>

   <!-- ============================================================================================================ -->
   <!-- Macro definitions -->
   <!-- ============================================================================================================ -->

   <macrodef name="compile-code-and-copy-resources">
      <attribute name="classpath-ref"/>
      <attribute name="build.dir"/>
      <attribute name="src.dir"/>
      <element name="resources-filterset" optional="true"/>
      <sequential>
         <!-- create the build directory -->
         <mkdir dir="@{build.dir}"/>

         <!-- compile code -->
         <javac srcdir="@{src.dir}"
                destdir="@{build.dir}"
                classpathref="@{classpath-ref}"
                debug="${java.compiler.debug}"
                nowarn="${java.compiler.generate.no.warnings}"
                memorymaximumsize="${java.compiler.max.memory}"
                source="${java.compiler.source.level}"
                target="${java.compiler.target.level}"
                fork="true"
                includeAntRuntime="false">
            <compilerarg line="${java.compiler.args}"/>
         </javac>

         <!-- copy resources -->
         <copy todir="@{build.dir}">
            <fileset dir="@{src.dir}">
               <patternset refid="compiler.resources.filterable"/>
            </fileset>
            <resources-filterset/>
         </copy>
         <copy todir="@{build.dir}">
            <fileset dir="@{src.dir}">
               <patternset refid="compiler.resources.nonfilterable"/>
            </fileset>
         </copy>

      </sequential>
   </macrodef>

   <macrodef name="create-dist">
      <attribute name="component.name"/>
      <element name="jar-manifest-attributes" optional="true"/>
      <element name="additional-files-to-copy" optional="true"/>
      <sequential>
         <!-- create the dist directory -->
         <mkdir dir="${@{component.name}.dist.dir}"/>

         <!-- copy required jar files and native lib -->
         <copy todir="${@{component.name}.dist.dir}" flatten="true">
            <fileset file="${log4j.jar}"/>
            <fileset file="${log4j-extras.jar}"/>
            <additional-files-to-copy/>
         </copy>

         <!-- define the execution classpath for use in the scripts -->
         <path id="@{component.name}.execution.classpath.elements">
            <pathelement location="${@{component.name}.dist.dir}"/>
            <fileset dir="${@{component.name}.dist.dir}">
               <include name="**/*.jar"/>
               <include name="**/*.dll"/>
               <include name="**/*.so"/>
            </fileset>
         </path>

         <!-- Set up a path id for the dist directory so it contains the correct kind of slashes when we do the pathconvert mapping -->
         <path id="dist-@{component.name}.dir.before-conversion" path="${@{component.name}.dist.dir}"/>

         <!-- Convert the dist directory path for the target platform to ensure that all the slashes are in the right direction -->
         <pathconvert property="dist-@{component.name}.dir.after-conversion" dirsep="/" pathsep=":" refid="dist-@{component.name}.dir.before-conversion"/>

         <!-- Create the classpath -->
         <pathconvert property="@{component.name}.execution.classpath" dirsep="/" pathsep=" " refid="@{component.name}.execution.classpath.elements">
            <map from="${dist-@{component.name}.dir.after-conversion}" to="."/>
         </pathconvert>

         <!-- create jar of Java classes -->
         <jar destfile="${@{component.name}.dist.dir}/${@{component.name}.jar.filename}"
              basedir="${@{component.name}.build.dir}"
              update="no"
              compress="true">
            <manifest>
               <attribute name="Built-By" value="${jar.built-by}"/>
               <attribute name="Build-Timestamp" value="${build.timestamp}"/>
               <attribute name="Class-Path" value="${@{component.name}.execution.classpath}"/>
               <jar-manifest-attributes/>
            </manifest>
         </jar>

      </sequential>
   </macrodef>

   <macrodef name="create-mac-application">
      <attribute name="creator.code"/>
      <attribute name="app.pretty-name"/>
      <attribute name="app.pretty-name-no-spaces"/>
      <attribute name="version.number"/>
      <attribute name="main.class"/>
      <attribute name="bundle.identifier"/>
      <attribute name="signing.identity"/>
      <attribute name="iconset.file"/>
      <attribute name="icns.file"/>
      <attribute name="jre.options"/>

      <sequential>
         <!-- Create the directory structure-->
         <mkdir dir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/MacOS"/>
         <mkdir dir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/Resources/Java"/>

         <!-- Copy the JavaApplicationStub and make it executable -->
         <copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub"
               todir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/MacOS"/>
         <chmod file="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/MacOS/JavaApplicationStub" perm="755"/>

         <!-- Copy the Info.plist and PkgInfo files, with appropriate token filtering -->
         <copy todir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents" flatten="false">
            <fileset dir="${speck-gateway-web-distro.src.dir}/software/mac">
               <include name="Info.plist"/>
               <include name="PkgInfo"/>
            </fileset>
            <filterset>
               <filter token="creator.code" value="@{creator.code}"/>
               <filter token="app.pretty-name" value="@{app.pretty-name}"/>
               <filter token="version.number" value="@{version.number}"/>
               <filter token="main.class" value="@{main.class}"/>
               <filter token="bundle.identifier" value="@{bundle.identifier}"/>
               <filter token="icns.file" value="@{icns.file}"/>
               <filter token="jre.options" value="@{jre.options}"/>
            </filterset>
         </copy>

         <!-- Copy the icons -->
         <copy todir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/Resources" flatten="false">
            <fileset dir="${speck-gateway-web-distro.src.dir}/software/mac">
               <include name="@{iconset.file}/**/*"/>
            </fileset>
         </copy>

         <!-- Convert the folder of icons into an icns file -->
         <exec executable="/usr/bin/iconutil">
            <arg line="-c icns '${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/Resources/@{iconset.file}'"/>
         </exec>

         <!-- copy in all the jars and such, but exclude the Windows and Linux native libs and the README which we don't need for the app -->
         <copy todir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app/Contents/Resources/Java" flatten="true">
            <fileset dir="${speck-applications.dist.dir}">
               <exclude name="**/*.dll"/>
               <exclude name="**/*.so"/>
               <exclude name="**/README*"/>
               <include name="**/*"/>
            </fileset>
            <fileset dir="${base.directory}">
               <include name="LICENSE.txt"/>
            </fileset>
         </copy>

         <!-- copy the license, Apache notice, and the README -->
         <copy todir="${speck-gateway-web-distro.dist.dir}/software/mac/" flatten="true">
            <fileset dir="${base.directory}">
               <include name="LICENSE.txt"/>
               <include name="NOTICE.txt"/>
            </fileset>
            <fileset dir="${base.directory}/..">
               <include name="README.pdf"/>
            </fileset>
         </copy>

         <!-- Copy third-party licenses -->
         <copy file="${lib.dir}/apache-derby/LICENSE" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/APACHE_DERBY_LICENSE.txt"/>
         <copy file="${lib.dir}/commons-io/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/COMMONS_IO_LICENSE.txt"/>
         <copy file="${lib.dir}/commons-lang/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/COMMONS_LANG_LICENSE.txt"/>
         <copy file="${lib.dir}/HIDAPI/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/HIDAPI_LICENSE.txt"/>
         <copy file="${lib.dir}/httpcomponents-client/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/HTTP_COMPONENTS_LICENSE.txt"/>
         <copy file="${lib.dir}/jackson/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/JACKSON_LICENSE.txt"/>
         <copy file="${lib.dir}/JNA/license.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/JNA_LICENSE.txt"/>
         <copy file="${lib.dir}/JNAerator/LICENSE.txt" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/JNAERATOR_LICENSE.txt"/>
         <copy file="${lib.dir}/log4j/LICENSE" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/LOG4J_LICENSE.txt"/>
         <copy file="${lib.dir}/log4j-extras/LICENSE" tofile="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses/LOG4J_EXTRAS_LICENSE.txt"/>

         <!-- Set the bundle bit -->
         <exec executable="/usr/bin/SetFile">
            <arg line="-a B '${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app'"/>
         </exec>

         <!-- Sign the app! -->
         <exec executable="/usr/bin/codesign">
            <arg line="-s '@{signing.identity}' -f '${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app'"/>
         </exec>

         <!-- Create a disk image -->
         <echo level="info">Creating disk image: ${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name-no-spaces}.dmg</echo>
         <exec executable="/usr/bin/hdiutil">
            <arg line="create -fs HFS+ -volname '@{app.pretty-name}' -srcfolder '${speck-gateway-web-distro.dist.dir}/software/mac/' '${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name-no-spaces}.dmg' "/>
         </exec>

         <!-- Cleanup -->
         <delete dir="${speck-gateway-web-distro.dist.dir}/software/mac/@{app.pretty-name}.app"/>
         <delete dir="${speck-gateway-web-distro.dist.dir}/software/mac/Licenses"/>
         <delete file="${speck-gateway-web-distro.dist.dir}/software/mac/LICENSE.txt"/>
         <delete file="${speck-gateway-web-distro.dist.dir}/software/mac/NOTICE.txt"/>
         <delete file="${speck-gateway-web-distro.dist.dir}/software/mac/README.pdf"/>

      </sequential>
   </macrodef>

</project>